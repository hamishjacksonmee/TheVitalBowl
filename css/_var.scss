
// Variables

@mixin trans($time) {
	-webkit-transition: all $time ease;
     -moz-transition: all $time ease;
       -o-transition: all $time ease;   
      -ms-transition: all $time ease;
          transition: all $time ease;
}
@mixin transDelay($time) {
	-webkit-transition-delay: $time;
     -moz-transition-delay: $time;
       -o-transition-delay: $time;
          transition-delay: $time;
}
@mixin tranSpec($object,$time) {
	-webkit-transition: $object $time ease;
     -moz-transition: $object $time ease;
       -o-transition: $object $time ease;   
      -ms-transition: $object $time ease;
          transition: $object $time ease;
}
@mixin tranSpec2($object,$time,$object2,$time2) {
	-webkit-transition: $object $time ease, $object2 $time2 ease;
     -moz-transition: $object $time ease, $object2 $time2 ease;
       -o-transition: $object $time ease, $object2 $time2 ease;
      -ms-transition: $object $time ease, $object2 $time2 ease;
          transition: $object $time ease, $object2 $time2 ease;
}
@mixin tranSpec3($object,$time,$object2,$time2,$object3,$time3) {
	-webkit-transition: $object $time ease, $object2 $time2 ease, $object3 $time3 ease;
     -moz-transition: $object $time ease, $object2 $time2 ease, $object3 $time3 ease;
       -o-transition: $object $time ease, $object2 $time2 ease, $object3 $time3 ease; 
      -ms-transition: $object $time ease, $object2 $time2 ease, $object3 $time3 ease;
          transition: $object $time ease, $object2 $time2 ease, $object3 $time3 ease;
}
@mixin cubic-trans($duration) {
  -webkit-transition: all $duration cubic-bezier(0.575, 0.165, 0.000, 1.000);
     -moz-transition: all $duration cubic-bezier(0.575, 0.165, 0.000, 1.000);
       -o-transition: all $duration cubic-bezier(0.575, 0.165, 0.000, 1.000);
          transition: all $duration cubic-bezier(0.575, 0.165, 0.000, 1.000);
}
@mixin transform($transformation) {
  -webkit-transform: $transformation;
     -moz-transform: $transformation;
      -ms-transform: $transformation;
          transform: $transformation;
}
@mixin transform-origin($position) {
	-webkit-transform-origin:$position;
	-moz-transform-origin:$position;
	-ms-transform-origin:$position;
	-o-transform-origin:$position;
	transform-origin:$position;
}
@mixin drop-shadow($opac) {
	-webkit-box-shadow: 2px 3px 15px 0px rgba(0, 0, 0, $opac);
	-moz-box-shadow:    2px 3px 15px 0px rgba(0, 0, 0, $opac);
	box-shadow:         2px 3px 15px 0px rgba(0, 0, 0, $opac);
}
@mixin no-highlight {
	-webkit-user-select: none;
	   -moz-user-select: none;
	    -ms-user-select: none;
}
@mixin border-box {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
	      box-sizing: border-box;
}
@mixin blur($amount) {
	-webkit-filter: blur($amount);
	   -moz-filter: blur($amount);
	     -o-filter: blur($amount);
	    -ms-filter: blur($amount);
	        filter: blur($amount);

	-webkit-transform: translate3d(0,0,0);
	        transform: translate3d(0,0,0);
}
@mixin no-select {
    -webkit-touch-callout: none;
      -webkit-user-select: none;
       -khtml-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}
/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}
/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}
